<HTML>
<! Copyright (c) 1990 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) Name.3 1.11 95/05/06 15:30:13-->
<! -->
<H1>Tk_Name</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_Name, Tk_PathName, Tk_NameToWindow - convert between names and window tokens<BR>
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Tk_Uid<BR>
<B>Tk_Name</B>(<I>tkwin</I>)<BR>
<P>
char *<BR>
<B>Tk_PathName</B>(<I>tkwin</I>)<BR>
<P>
Tk_Window<BR>
<B>Tk_NameToWindow</B>(<I>interp, pathName, tkwin</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Token for window.<BR>
<DT><CODE>Tcl_Interp *interp</CODE>
(out) <DD>Interpreter to use for error reporting.<BR>
<DT><CODE>char *pathName</CODE>
(in) <DD>Character string containing path name of window.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
Each window managed by Tk has two names, a short name that identifies<BR>
a window among children of the same parent, and a path name that<BR>
identifies the window uniquely among all the windows belonging to the<BR>
same main window.  The path name is used more often in Tk than the<BR>
short name;  many commands, like <B>bind</B>, expect path names as<BR>
arguments.<BR>
<P>
The <B>Tk_Name</B> macro returns a window's<BR>
short name, which is the same as the <I>name</I> argument<BR>
passed to <B>Tk_CreateMainWindow</B><BR>
or <B>Tk_CreateTopLevelWindow</B> or <B>Tk_CreateChildWindow</B> when<BR>
the window was created.  The value is returned<BR>
as a Tk_Uid, which may be used just like a string pointer but also has<BR>
the properties of a unique identfier <BR>
(See the <A HREF="GetUid.ht"> <B>Tk_GetUid</B></A> manual entry for details).<BR>
<P>
The <B>Tk_PathName</B> macro returns a<BR>
hierarchical name for <I>tkwin</I>.<BR>
Path names have a structure similar to file names in Unix but with<BR>
dots between elements instead of slashes:  the main window for<BR>
an application (one created by calling <B>Tk_CreateMainWindow</B><BR>
or by calling <B>Tk_CreateTopLevelWindow</B> with a NULL <I>parent</I><BR>
argument) has the path name ``.'';  its children have names like<BR>
``.a'' and ``.b''; their children have names like ``.a.aa'' and<BR>
``.b.bb''; and so on.  A window is considered to be be a child of<BR>
another window for naming purposes if the second window was named<BR>
as the first window's <I>parent</I> when the first window was created.<BR>
This is not always the same as the X window hierarchy.  For<BR>
example, a pop-up<BR>
is created as a child of the root window, but its logical parent will<BR>
usually be a window within the application.<BR>
<P>
The procedure <B>Tk_NameToWindow</B> returns the token for a window<BR>
given its path name (the <I>pathName</I> argument) and another window<BR>
belonging to the same main window (<I>tkwin</I>).  It normally<BR>
returns a token for the named window, but if no such window exists<BR>
<B>Tk_NameToWindow</B> leaves an error message in <I>interp-&gt;result</I><BR>
and returns NULL.  The <I>tkwin</I> argument to <B>Tk_NameToWindow</B><BR>
is needed because path names are only unique within a single<BR>
application hierarchy.  If, for example, a single process has opened<BR>
two main windows, each will have a separate naming hierarchy and the<BR>
same path name might appear in each of the hierarchies.  Normally<BR>
<I>tkwin</I> is the main window of the desired hierarchy, but this<BR>
need not be the case:  any window in the desired hierarchy may be used.<BR>
<BR>
<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>name, path name, token, window<BR>
