<HTML>
<! Copyright (c) 1994 The Regents of the University of California.-->
<! Copyright (c) 1994-1995 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) CrtImgType.3 1.5 95/05/28 13:52:06-->
<! -->
<H1>Tk_CreateImageType</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_CreateImageType - define new kind of image
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
<B>Tk_CreateImageType</B>(<I>typePtr</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tk_ImageType *typePtr</CODE>
(in) <DD>Structure that defines the new type of image.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
<B>Tk_CreateImageType</B> is invoked to define a new kind of image.<BR>
An image type corresponds to a particular value of the <I>type</I><BR>
argument for the <B>image create</B> command.  There may exist<BR>
any number of different image types, and new types may be defined<BR>
dynamically by calling <B>Tk_CreateImageType</B>.<BR>
For example, there might be one type for 2-color bitmaps,<BR>
another for multi-color images, another for dithered images,<BR>
another for video, and so on.<BR>
<P>
The code that implements a new image type is called an<BR>
<I>image manager</I>.<BR>
It consists of a collection of procedures plus three different<BR>
kinds of data structures.<BR>
The first data structure is a Tk_ImageType structure, which contains<BR>
the name of the image type and pointers to five procedures provided<BR>
by the image manager to deal with images of this type:<BR>
<BR>
<DL>
typedef struct Tk_ImageType {<BR>
<DL>
char *<I>name</I>;<BR>
Tk_ImageCreateProc *<I>createProc</I>;<BR>
Tk_ImageGetProc *<I>getProc</I>;<BR>
Tk_ImageDisplayProc *<I>displayProc</I>;<BR>
Tk_ImageFreeProc *<I>freeProc</I>;<BR>
Tk_ImageDeleteProc *<I>deleteProc</I>;<BR>
</DL>
} Tk_ImageType;<BR>
</DL>
<BR>
The fields of this structure will be described in later subsections
of this entry.
<P>
The second major data structure manipulated by an image manager
is called an <I>image master</I>;  it contains overall information
about a particular image, such as the values of the configuration
options specified in an <B>image create</B> command.
There will usually be one of these structures for each
invocation of the <B>image create</B> command.
<P>
The third data structure related to images is an <I>image instance</I>.
There will usually be one of these structures for each usage of an
image in a particular widget.
It is possible for a single image to appear simultaneously
in multiple widgets, or even multiple times in the same widget.
Furthermore, different instances may be on different screens
or displays.
The image instance data structure describes things that may
vary from instance to instance, such as colors and graphics
contexts for redisplay.
There is usually one instance structure for each <B>-image</B>
option specified for a widget or canvas item.
<P>
The following subsections describe the fields of a Tk_ImageType
in more detail.

<A NAME=NAME><H2>NAME</H2>
</A><P>
<I>typePtr-&gt;name</I> provides a name for the image type.
Once <B>Tk_CreateImageType</B> returns, this name may be used
in <B>image create</B> commands to create images of the new
type.
If there already existed an image type by this name then
the new image type replaces the old one.

<A NAME=CREATEPROC><H2>CREATEPROC</H2>
</A><I>typePtr-&gt;createProc</I> provides the address of a procedure for
Tk to call whenever <B>image create</B> is invoked to create
an image of the new type.
<I>typePtr-&gt;createProc</I> must match the following prototype:
<BR>
<DL>
typedef int Tk_ImageCreateProc(<BR>
<DL>
Tcl_Interp *<I>interp</I>,<BR>
char *<I>name</I>,<BR>
int <I>argc</I>,<BR>
char **<I>argv</I>,<BR>
Tk_ImageType *<I>typePtr</I>,<BR>
Tk_ImageMaster <I>master</I>,<BR>
ClientData *<I>masterDataPtr</I>);<BR>
</DL>
</DL>
<BR>
The <I>interp</I> argument is the interpreter in which the <B>image</B>
command was invoked, and <I>name</I> is the name for the new image,
which was either specified explicitly in the <B>image</B> command
or generated automatically by the <B>image</B> command.
The <I>argc</I> and <I>argv</I> arguments describe all the configuration
options for the new image (everything after the name argument to
<B>image</B>).
The <I>master</I> argument is a token that refers to Tk's information
about this image;  the image manager must return this token to
Tk when invoking the <B>Tk_ImageChanged</B> procedure.
Typically <I>createProc</I> will parse <I>argc</I> and <I>argv</I>
and create an image master data structure for the new image.
<I>createProc</I> may store an arbitrary one-word value at
*<I>masterDataPtr</I>, which will be passed back to the
image manager when other callbacks are invoked.
Typically the value is a pointer to the master data
structure for the image.
<P>
If <I>createProc</I> encounters an error, it should leave an error
message in <I>interp-&gt;result</I> and return <B>TCL_ERROR</B>;  otherwise
it should return <B>TCL_OK</B>.
<P>
<I>createProc</I> should call <B>Tk_ImageChanged</B> in order to set the
size of the image and request an initial redisplay.

<A NAME=GETPROC><H2>GETPROC</H2>
</A><P>
<I>typePtr-&gt;getProc</I> is invoked by Tk whenever a widget
calls <B>Tk_GetImage</B> to use a particular image.
This procedure must match the following prototype:
<BR>
<DL>
typedef ClientData Tk_ImageGetProc(<BR>
<DL>
Tk_Window <I>tkwin</I>,<BR>
ClientData <I>masterData</I>);<BR>
</DL>
</DL>
<BR>
The <I>tkwin</I> argument identifies the window in which the
image will be used and <I>masterData</I> is the value
returned by <I>createProc</I> when the image master was created.
<I>getProc</I> will usually create a data structure for the new
instance, including such things as the resources needed to
display the image in the given window.
<I>getProc</I> returns a one-word token for the instance, which
is typically the address of the instance data structure.
Tk will pass this value back to the image manager when invoking
its <I>displayProc</I> and <I>freeProc</I> procedures.

<A NAME=DISPLAYPROC><H2>DISPLAYPROC</H2>
</A><P>
<I>typePtr-&gt;displayProc</I> is invoked by Tk whenever an image needs
to be displayed (i.e., whenever a widget calls <B>Tk_RedrawImage</B>).
<I>displayProc</I> must match the following prototype:
<BR>
<DL>
typedef void Tk_ImageDisplayProc(<BR>
<DL>
ClientData <I>instanceData</I>,<BR>
Display *<I>display</I>,<BR>
Drawable <I>drawable</I>,<BR>
int <I>imageX</I>,<BR>
int <I>imageY</I>,<BR>
int <I>width</I>,<BR>
int <I>height</I>,<BR>
int <I>drawableX</I>,<BR>
int <I>drawableY</I>);<BR>
</DL>
</DL>
<BR>
The <I>instanceData</I> will be the same as the value returned by
<I>getProc</I> when the instance was created.
<I>display</I> and <I>drawable</I> indicate where to display the
image;  <I>drawable</I> may be a pixmap rather than
the window specified to <I>getProc</I> (this is usually the case,
since most widgets double-buffer their redisplay to get smoother
visual effects).
<I>imageX</I>, <I>imageY</I>, <I>width</I>, and <I>height</I>
identify the region of the image that must be redisplayed.
This region will always be within the size of the image
as specified in the most recent call to <B>Tk_ImageChanged</B>.
<I>drawableX</I> and <I>drawableY</I> indicate where in <I>drawable</I>
the image should be displayed;  <I>displayProc</I> should display
the given region of the image so that point (<I>imageX</I>, <I>imageY</I>)
in the image appears at (<I>drawableX</I>, <I>drawableY</I>) in <I>drawable</I>.

<A NAME=FREEPROC><H2>FREEPROC</H2>
</A><P>
<I>typePtr-&gt;freeProc</I> contains the address of a procedure that
Tk will invoke when an image instance is released (i.e., when
<B>Tk_FreeImage</B> is invoked).
This can happen, for example, when a widget is deleted or a image item
in a canvas is deleted, or when the image displayed in a widget or
canvas item is changed.
<I>freeProc</I> must match the following prototype:
<BR>
<DL>
typedef void Tk_ImageFreeProc(<BR>
<DL>
ClientData <I>instanceData</I>,<BR>
Display *<I>display</I>);<BR>
</DL>
</DL>
<BR>
The <I>instanceData</I> will be the same as the value returned by
<I>getProc</I> when the instance was created, and <I>display</I>
is the display containing the window for the instance.
<I>freeProc</I> should release any resources associated with the
image instance, since the instance will never be used again.

<A NAME=DELETEPROC><H2>DELETEPROC</H2>
</A><P>
<I>typePtr-&gt;deleteProc</I> is a procedure that Tk invokes when an
image is being deleted (i.e. when the <B>image delete</B> command
is invoked).
Before invoking <I>deleteProc</I> Tk will invoke <I>freeProc</I> for
each of the image's instances.
<I>deleteProc</I> must match the following prototype:
<BR>
<DL>
typedef void Tk_ImageDeleteProc(<BR>
<DL>
ClientData <I>masterData</I>);<BR>
</DL>
</DL>
<BR>
The <I>masterData</I> argument will be the same as the value
stored in <I>*masterDataPtr</I> by <I>createProc</I> when the
image was created.
<I>deleteProc</I> should release any resources associated with
the image.

<A NAME=Section0><H2>SEE ALSO</H2>
</A><A HREF="ImgChanged.ht"> Tk_ImageChanged</A>, <A HREF="GetImage.ht"> Tk_GetImage</A>, <A HREF="GetImage.ht"> Tk_FreeImage</A>, <A HREF="GetImage.ht"> Tk_RedrawImage</A>, <A HREF="GetImage.ht"> Tk_SizeOfImage</A>

<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>image manager, image type, instance, master
