<HTML>
<! Copyright (c) 1990-1993 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) 3DBorder.3 1.18 95/05/06 15:29:06-->
<! -->
<H1>Tk_Get3DBorder</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_Get3DBorder, Tk_Draw3DRectangle, Tk_Fill3DRectangle, Tk_Draw3DPolygon, Tk_Fill3DPolygon, Tk_3DVerticalBevel, Tk_3DHorizontalBevel, Tk_SetBackgroundFromBorder, Tk_NameOf3DBorder, Tk_3DBorderColor, Tk_3DBorderGC, Tk_Free3DBorder - draw borders with three-dimensional appearance<BR>
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Tk_3DBorder<BR>
<B>Tk_Get3DBorder(</B><I>interp, tkwin, colorName</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_Draw3DRectangle(</B><I>tkwin, drawable, border, x, y, width, height, borderWidth, relief</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_Fill3DRectangle(</B><I>tkwin, drawable, border, x, y, width, height, borderWidth, relief</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_Draw3DPolygon(</B><I>tkwin, drawable, border, pointPtr, numPoints, polyBorderWidth, leftRelief</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_Fill3DPolygon(</B><I>tkwin, drawable, border, pointPtr, numPoints, polyBorderWidth, leftRelief</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_3DVerticalBevel</B>(<I>tkwin, drawable, border, x, y, width, height, leftBevel, relief</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_3DHorizontalBevel</B>(<I>tkwin, drawable, border, x, y, width, height, leftIn, rightIn, topBevel, relief</I><B>)</B><BR>
<P>
void<BR>
<B>Tk_SetBackgroundFromBorder(</B><I>tkwin, border</I><B>)</B><BR>
<P>
char *<BR>
<B>Tk_NameOf3DBorder(</B><I>border</I><B>)</B><BR>
<P>
XColor *<BR>
<B>Tk_3DBorderColor(</B><I>border</I><B>)</B><BR>
<P>
GC *<BR>
<B>Tk_3DBorderGC(</B><I>tkwin, border, which</I><B>)</B><BR>
<P>
<B>Tk_Free3DBorder(</B><I>border</I><B>)</B><BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tcl_Interp *interp</CODE>
(in) <DD>Interpreter to use for error reporting.<BR>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Token for window (for all procedures except <B>Tk_Get3DBorder</B>,<BR>
must be the window for which the border was allocated).<BR>
<DT><CODE>Tk_Uid colorName</CODE>
(in) <DD>Textual description of color corresponding to background (flat areas).<BR>
Illuminated edges will be brighter than this and shadowed edges will<BR>
be darker than this.<BR>
<DT><CODE>Drawable drawable</CODE>
(in) <DD>X token for window or pixmap;  indicates where graphics are to be drawn.<BR>
Must either be the X window for <I>tkwin</I> or a pixmap with the<BR>
same screen and depth as <I>tkwin</I>.<BR>
<DT><CODE>Tk_3DBorder border</CODE>
(in) <DD>Token for border previously allocated in call to <B>Tk_Get3DBorder</B>.<BR>
<DT><CODE>int x</CODE>
(in) <DD>X-coordinate of upper-left corner of rectangle describing border<BR>
or bevel, in pixels.<BR>
<DT><CODE>int y</CODE>
(in) <DD>Y-coordinate of upper-left corner of rectangle describing border or<BR>
bevel, in pixels.<BR>
<DT><CODE>int width</CODE>
(in) <DD>Width of rectangle describing border or bevel, in pixels.<BR>
<DT><CODE>int height</CODE>
(in) <DD>Height of rectangle describing border or bevel, in pixels.<BR>
<DT><CODE>int borderWidth</CODE>
(in) <DD>Width of border in pixels. Positive means border is inside rectangle<BR>
given by <I>x</I>, <I>y</I>, <I>width</I>, <I>height</I>, negative means<BR>
border is outside rectangle.<BR>
<DT><CODE>int relief</CODE>
(in) <DD>Indicates 3-D position of interior of object relative to exterior;<BR>
should be TK_RELIEF_RAISED, TK_RELIEF_SUNKEN, TK_RELIEF_GROOVE,<BR>
or TK_RELIEF_RIDGE (may also be TK_RELIEF_FLAT<BR>
for <B>Tk_Fill3DRectangle</B>).<BR>
<DT><CODE>XPoint *pointPtr</CODE>
(in) <DD>Pointer to array of points describing the set of vertices in a polygon.<BR>
The polygon need not be closed (it will be closed automatically if it<BR>
isn't).<BR>
<DT><CODE>int numPoints</CODE>
(in) <DD>Number of points at <I>*pointPtr</I>.<BR>
<DT><CODE>int polyBorderWidth</CODE>
(in) <DD>Width of border in pixels.  If positive, border is drawn to left of<BR>
trajectory given by <I>pointPtr</I>;  if negative, border is drawn to<BR>
right of trajectory.  If <I>leftRelief</I> is TK_RELIEF_GROOVE or<BR>
TK_RELIEF_RIDGE then the border is centered on the trajectory.<BR>
<DT><CODE>int leftRelief</CODE>
(in) <DD>Height of left side of polygon's path relative to right.  TK_RELIEF_RAISED<BR>
means left side should appear higher and TK_RELIEF_SUNKEN means right side<BR>
should appear higher;<BR>
TK_RELIEF_GROOVE and TK_RELIEF_RIDGE mean the obvious things.<BR>
For <B>Tk_Fill3DPolygon</B>, TK_RELIEF_FLAT may also be specified to<BR>
indicate no difference in height.<BR>
<DT><CODE>int leftBevel</CODE>
(in) <DD>Non-zero means this bevel forms the left side of the object;  zero means<BR>
it forms the right side.<BR>
<DT><CODE>int leftIn</CODE>
(in) <DD>Non-zero means that the left edge of the horizontal bevel angles in,<BR>
so that the bottom of the edge is farther to the right than<BR>
the top.<BR>
Zero means the edge angles out, so that the bottom is farther to the<BR>
left than the top.<BR>
<DT><CODE>int rightIn</CODE>
(in) <DD>Non-zero means that the right edge of the horizontal bevel angles in,<BR>
so that the bottom of the edge is farther to the left than the top.<BR>
Zero means the edge angles out, so that the bottom is farther to the<BR>
right than the top.<BR>
<DT><CODE>int topBevel</CODE>
(in) <DD>Non-zero means this bevel forms the top side of the object;  zero means<BR>
it forms the bottom side.<BR>
<DT><CODE>int which</CODE>
(in) <DD>Specifies which of the border's graphics contexts is desired.<BR>
Must be TK_3D_FLAT_GC, TK_3D_LIGHT_GC, or TK_3D_DARK_GC.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
These procedures provide facilities for drawing window borders in a<BR>
way that produces a three-dimensional appearance.  <B>Tk_Get3DBorder</B><BR>
allocates colors and Pixmaps needed to draw a border in the window<BR>
given by the <I>tkwin</I> argument.  The <I>colorName</I><BR>
argument indicates what colors should be used in the border.<BR>
<I>ColorName</I> may be any value acceptable to <B>Tk_GetColor</B>.<BR>
The color indicated by <I>colorName</I> will not actually be used in<BR>
the border;  it indicates the background color for the window<BR>
(i.e. a color for flat surfaces).<BR>
The illuminated portions of the border will appear brighter than indicated<BR>
by <I>colorName</I>, and the shadowed portions of the border will appear<BR>
darker than <I>colorName</I>.<BR>
<P>
<B>Tk_Get3DBorder</B> returns a token that may be used in later calls<BR>
to <B>Tk_Draw3DRectangle</B>.  If an error occurs in allocating information<BR>
for the border (e.g. <I>colorName</I> isn't a legal color specifier),<BR>
then NULL is returned and an error message is left in <I>interp-&gt;result</I>.<BR>
<P>
Once a border structure has been created, <B>Tk_Draw3DRectangle</B> may be<BR>
invoked to draw the border.<BR>
The <I>tkwin</I> argument specifies the<BR>
window for which the border was allocated, and <I>drawable</I><BR>
specifies a window or pixmap in which the border is to be drawn.<BR>
<I>Drawable</I> need not refer to the same window as <I>tkwin</I>, but it<BR>
must refer to a compatible<BR>
pixmap or window:  one associated with the same screen and with the<BR>
same depth as <I>tkwin</I>.<BR>
The <I>x</I>, <I>y</I>, <I>width</I>, and<BR>
<I>height</I> arguments define the bounding box of the border region<BR>
within <I>drawable</I> (usually <I>x</I> and <I>y</I> are zero and<BR>
<I>width</I> and <I>height</I> are the dimensions of the window), and<BR>
<I>borderWidth</I> specifies the number of pixels actually<BR>
occupied by the border.  The <I>relief</I> argument indicates<BR>
which of several three-dimensional effects is desired:<BR>
TK_RELIEF_RAISED means that the interior of the rectangle should appear raised<BR>
relative to the exterior of the rectangle, and<BR>
TK_RELIEF_SUNKEN means that the interior should appear depressed.<BR>
TK_RELIEF_GROOVE and TK_RELIEF_RIDGE mean that there should appear to be<BR>
a groove or ridge around the exterior of the rectangle.<BR>
<P>
<B>Tk_Fill3DRectangle</B> is somewhat like <B>Tk_Draw3DRectangle</B> except<BR>
that it first fills the rectangular area with the background color<BR>
(one corresponding<BR>
to the <I>colorName</I> used to create <I>border</I>).  Then it calls<BR>
<B>Tk_Draw3DRectangle</B> to draw a border just inside the outer edge of<BR>
the rectangular area.  The argument <I>relief</I> indicates the desired<BR>
effect (TK_RELIEF_FLAT means no border should be drawn; all that<BR>
happens is to fill the rectangle with the background color).<BR>
<P>
The procedure <B>Tk_Draw3DPolygon</B> may be used to draw more complex<BR>
shapes with a three-dimensional appearance.  The <I>pointPtr</I> and<BR>
<I>numPoints</I> arguments define a trajectory, <I>polyBorderWidth</I><BR>
indicates how wide the border should be (and on which side of the<BR>
trajectory to draw it), and <I>leftRelief</I> indicates which side<BR>
of the trajectory should appear raised.  <B>Tk_Draw3DPolygon</B><BR>
draws a border around the given trajectory using the colors from<BR>
<I>border</I> to produce a three-dimensional appearance.  If the trajectory is<BR>
non-self-intersecting, the appearance will be a raised or sunken<BR>
polygon shape.  The trajectory may be self-intersecting, although<BR>
it's not clear how useful this is.<BR>
<P>
<B>Tk_Fill3DPolygon</B> is to <B>Tk_Draw3DPolygon</B> what<BR>
<B>Tk_Fill3DRectangle</B> is to <B>Tk_Draw3DRectangle</B>:  it fills<BR>
the polygonal area with the background color from <I>border</I>,<BR>
then calls <B>Tk_Draw3DPolygon</B> to draw a border around the<BR>
area (unless <I>leftRelief</I> is TK_RELIEF_FLAT;  in this case no<BR>
border is drawn).<BR>
<P>
The procedures <B>Tk_3DVerticalBevel</B> and <B>Tk_3DHorizontalBevel</B><BR>
provide lower-level drawing primitives that are used by<BR>
procedures such as <B>Tk_Draw3DRectangle</B>.<BR>
These procedures are also useful in their own right for drawing<BR>
rectilinear border shapes.<BR>
<B>Tk_3DVerticalBevel</B> draws a vertical beveled edge, such as the<BR>
left or right side of a rectangle, and <B>Tk_3DHorizontalBevel</B><BR>
draws a horizontal beveled edge, such as the top or bottom of a<BR>
rectangle.<BR>
Each procedure takes <I>x</I>, <I>y</I>, <I>width</I>, and <I>height</I><BR>
arguments that describe the rectangular area of the beveled edge<BR>
(e.g., <I>width</I> is the border width for <B>Tk_3DVerticalBevel</B>).<BR>
The <I>leftBorder</I> and <I>topBorder</I> arguments indicate the<BR>
position of the border relative to the ``inside'' of the object, and<BR>
<I>relief</I> indicates the relief of the inside of the object relative<BR>
to the outside.<BR>
<B>Tk_3DVerticalBevel</B> just draws a rectangular region.<BR>
<B>Tk_3DHorizontalBevel</B> draws a trapezoidal region to generate<BR>
mitered corners;  it should be called after <B>Tk_3DVerticalBevel</B><BR>
(otherwise <B>Tk_3DVerticalBevel</B> will overwrite the mitering in<BR>
the corner).<BR>
The <I>leftIn</I> and <I>rightIn</I> arguments to <B>Tk_3DHorizontalBevel</B><BR>
describe the mitering at the corners;  a value of 1 means that the bottom<BR>
edge of the trapezoid will be shorter than the top, 0 means it will<BR>
be longer.<BR>
For example, to draw a rectangular border the top bevel should be<BR>
drawn with 1 for both <I>leftIn</I> and <I>rightIn</I>, and the<BR>
bottom bevel should be drawn with 0 for both arguments.<BR>
<P>
The procedure <B>Tk_SetBackgroundFromBorder</B> will modify the background<BR>
pixel and/or pixmap of <I>tkwin</I> to produce a result compatible<BR>
with <I>border</I>.  For color displays, the resulting background will<BR>
just be the color given by the <I>colorName</I> argument passed to<BR>
<B>Tk_Get3DBorder</B> when <I>border</I> was created;  for monochrome<BR>
displays, the resulting background<BR>
will be a light stipple pattern, in order to distinguish the background from<BR>
the illuminated portion of the border.<BR>
<P>
Given a token for a border, the procedure <B>Tk_NameOf3DBorder</B><BR>
will return the <I>colorName</I> string that was passed to<BR>
<B>Tk_Get3DBorder</B> to create the border.<BR>
<P>
The procedure <B>Tk_3DBorderColor</B> returns the XColor structure<BR>
that will be used for flat surfaces drawn for its <I>border</I><BR>
argument by procedures like <B>Tk_Fill3DRectangle</B>.<BR>
The return value corresponds to the <I>colorName</I> passed to<BR>
<B>Tk_Get3DBorder</B>.<BR>
The XColor, and its associated pixel value, will remain allocated<BR>
as long as <I>border</I> exists.<BR>
<P>
The procedure <B>Tk_3DBorderGC</B> returns one of the X graphics contexts<BR>
that are used to draw the border.<BR>
The argument <I>which</I> selects which one of the three possible GC's:<BR>
TK_3D_FLAT_GC returns the context used for flat surfaces,<BR>
TK_3D_LIGHT_GC returns the context for light shadows,<BR>
and TK_3D_DARK_GC returns the context for dark shadows.<BR>
<P>
When a border is no longer needed, <B>Tk_Free3DBorder</B> should<BR>
be called to release the resources associated with the border.<BR>
There should be exactly one call to <B>Tk_Free3DBorder</B> for<BR>
each call to <B>Tk_Get3DBorder</B>.<BR>
<BR>
<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>3D, background, border, color, depressed, illumination, polygon, raised, shadow, three-dimensional effect<BR>
