<HTML>
<! Copyright (c) 1994 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) BindTable.3 1.3 95/05/06 15:29:08-->
<! -->
<H1>Tk_CreateBindingTable</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_CreateBindingTable, Tk_DeleteBindingTable, Tk_CreateBinding, Tk_DeleteBinding, Tk_GetBinding, Tk_GetAllBindings, Tk_DeleteAllBindings, Tk_BindEvent - invoke scripts in response to X events<BR>
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Tk_BindingTable<BR>
<B>Tk_CreateBindingTable(</B><I>interp</I><B>)</B><BR>
<P>
<B>Tk_DeleteBindingTable(</B><I>bindingTable</I><B>)</B><BR>
<P>
unsigned long<BR>
<B>Tk_CreateBinding(</B><I>interp, bindingTable, object, eventString, script, append</I><B>)</B><BR>
<P>
int<BR>
<B>Tk_DeleteBinding(</B><I>interp, bindingTable, object, eventString</I><B>)</B><BR>
<P>
char *<BR>
<B>Tk_GetBinding(</B><I>interp, bindingTable, object, eventString</I><B>)</B><BR>
<P>
<B>Tk_GetAllBindings(</B><I>interp, bindingTable, object</I><B>)</B><BR>
<P>
<B>Tk_DeleteAllBindings(</B><I>bindingTable, object</I><B>)</B><BR>
<P>
<B>Tk_BindEvent(</B><I>bindingTable, eventPtr, tkwin, numObjects, objectPtr</I><B>)</B><BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tcl_Interp *interp</CODE>
(in) <DD>Interpreter to use when invoking bindings in binding table.  Also<BR>
used for returning results and errors from binding procedures.<BR>
<DT><CODE>Tk_BindingTable bindingTable</CODE>
(in) <DD>Token for binding table;  must have been returned by some previous<BR>
call to <B>Tk_CreateBindingTable</B>.<BR>
<DT><CODE>ClientData object</CODE>
(in) <DD>Identifies object with which binding is associated.<BR>
<DT><CODE>char *eventString</CODE>
(in) <DD>String describing event sequence.<BR>
<DT><CODE>char *script</CODE>
(in) <DD>Tcl script to invoke when binding triggers.<BR>
<DT><CODE>int append</CODE>
(in) <DD>Non-zero means append <I>script</I> to existing script for binding,<BR>
if any; zero means replace existing script with new one.<BR>
<DT><CODE>XEvent *eventPtr</CODE>
(in) <DD>X event to match against bindings in <I>bindingTable</I>.<BR>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Identifier for any window on the display where the event occurred.<BR>
Used to find display-related information such as key maps.<BR>
<DT><CODE>int numObjects</CODE>
(in) <DD>Number of object identifiers pointed to by <I>objectPtr</I>.<BR>
<DT><CODE>ClientData *objectPtr</CODE>
(in) <DD>Points to an array of object identifiers:  bindings will be considered<BR>
for each of these objects in order from first to last.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
These procedures provide a general-purpose mechanism for creating<BR>
and invoking bindings.<BR>
Bindings are organized in terms of <I>binding tables</I>.<BR>
A binding table consists of a collection of bindings plus a history<BR>
of recent events.<BR>
Within a binding table, bindings are associated with <I>objects</I>.<BR>
The meaning of an object is defined by clients of the binding package.<BR>
For example, Tk keeps uses one binding table to hold all of the bindings<BR>
created by the <B>bind</B> command.<BR>
For this table, objects are pointers to strings such as window names, class<BR>
names, or other binding tags such as <B>all</B>.<BR>
Tk also keeps a separate binding table for each canvas widget, which manages<BR>
bindings created by the canvas's <B>bind</B> widget command;  within<BR>
this table, an object is either a pointer to the internal structure for a<BR>
canvas item or a Tk_Uid identifying a tag.<BR>
<P>
The procedure <B>Tk_CreateBindingTable</B> creates a new binding<BR>
table and associates <I>interp</I> with it (when bindings in the<BR>
table are invoked, the scripts will be evaluated in <I>interp</I>).<BR>
<B>Tk_CreateBindingTable</B> returns a token for the table, which<BR>
must be used in calls to other procedures such as <B>Tk_CreateBinding</B><BR>
or <B>Tk_BindEvent</B>.<BR>
<P>
<B>Tk_DeleteBindingTable</B> frees all of the state associated<BR>
with a binding table.<BR>
Once it returns the caller should not use the <I>bindingTable</I><BR>
token again.<BR>
<P>
<B>Tk_CreateBinding</B> adds a new binding to an existing table.<BR>
The <I>object</I> argument identifies the object with which the<BR>
binding is to be associated, and it may be any one-word value.<BR>
Typically it is a pointer to a string or data structure.<BR>
The <I>eventString</I> argument identifies the event or sequence<BR>
of events for the binding;  <BR>
See the <A HREF="bind.ht"> <B>bind</B></A> manual entry for a description of its format.<BR>
<I>script</I> is the Tcl script to be evaluated when the binding<BR>
triggers.<BR>
<I>append</I> indicates what to do if there already<BR>
exists a binding for <I>object</I> and <I>eventString</I>:  if <I>append</I><BR>
is zero then <I>script</I> replaces the old script;  if <I>append</I><BR>
is non-zero then the new script is appended to the old one.<BR>
<B>Tk_CreateBinding</B> returns an X event mask for all the events<BR>
associated with the bindings.<BR>
This information may be useful to invoke <B>XSelectInput</B> to<BR>
select relevant events, or to disallow the use of certain events<BR>
in bindings.<BR>
If an error occurred while creating the binding (e.g., <I>eventString</I><BR>
refers to a non-existent event), then 0 is returned and an error<BR>
message is left in <I>interp-&gt;result</I>.<BR>
<P>
<B>Tk_DeleteBinding</B> removes from <I>bindingTable</I> the<BR>
binding given by <I>object</I> and <I>eventString</I>, if<BR>
such a binding exists.<BR>
<B>Tk_DeleteBinding</B> always returns TCL_OK.<BR>
In some cases it may reset <I>interp-&gt;result</I> to the default<BR>
empty value.<BR>
<P>
<B>Tk_GetBinding</B> returns a pointer to the script associated<BR>
with <I>eventString</I> and <I>object</I> in <I>bindingTable</I>.<BR>
If no such binding exists then NULL is returned and an error<BR>
message is left in <I>interp-&gt;result</I>.<BR>
<P>
<B>Tk_GetAllBindings</B> returns in <I>interp-&gt;result</I> a list<BR>
of all the event strings for which there are bindings in<BR>
<I>bindingTable</I> associated with <I>object</I>.<BR>
If there are no bindings for <I>object</I> then an empty<BR>
string is returned in <I>interp-&gt;result</I>.<BR>
<P>
<B>Tk_DeleteAllBindings</B> deletes all of the bindings in<BR>
<I>bindingTable</I> that are associated with <I>object</I>.<BR>
<P>
<B>Tk_BindEvent</B> is called to process an event.<BR>
It makes a copy of the event in an internal history list associated<BR>
with the binding table, then it checks for bindings that match<BR>
the event.<BR>
<B>Tk_BindEvent</B> processes each of the objects pointed to<BR>
by <I>objectPtr</I> in turn.<BR>
For each object, it finds all the bindings that match the current<BR>
event history, selects the most specific binding using the priority<BR>
mechanism described in the documentation for <B>bind</B>,<BR>
and invokes the script for that binding.<BR>
If there are no matching bindings for a particular object, then<BR>
the object is skipped.<BR>
<B>Tk_BindEvent</B> continues through all of the objects, handling<BR>
exceptions such as errors, <B>break</B>, and <B>continue</B> as<BR>
described in the documentation for <B>bind</B>.<BR>
<BR>
<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>binding, event, object, script<BR>
