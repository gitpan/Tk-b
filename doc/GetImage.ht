<HTML>
<! Copyright (c) 1994 The Regents of the University of California.-->
<! Copyright (c) 1994-1995 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) GetImage.3 1.4 95/05/06 15:29:36-->
<! -->
<H1>Tk_GetImage</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_GetImage, Tk_RedrawImage, Tk_SizeOfImage, Tk_FreeImage - use an image in a widget
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Tk_Image<BR>
<B>Tk_GetImage</B>(<I>interp, tkwin, name, changeProc, clientData</I>)<BR>
<P>
<B>Tk_RedrawImage</B>(<I>image, imageX, imageY, width, height, drawable, drawableX, drawableY</I>)<BR>
<P>
<B>Tk_SizeOfImage</B>(<I>image, widthPtr, heightPtr</I>)<BR>
<P>
<B>Tk_FreeImage</B>(<I>image</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tcl_Interp *interp</CODE>
(in) <DD>Place to leave error message.<BR>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Window in which image will be used.<BR>
<DT><CODE>char *name</CODE>
(in) <DD>Name of image.<BR>
<DT><CODE>Tk_ImageChangedProc *changeProc</CODE>
(in) <DD>Procedure for Tk to invoke whenever image content or size changes.<BR>
<DT><CODE>ClientData clientData</CODE>
(in) <DD>One-word value for Tk to pass to <I>changeProc</I>.<BR>
<DT><CODE>Tk_Image</CODE>
(image) <DD>Token for image instance;  must have been returned by a previous<BR>
call to <B>Tk_GetImage</B>.<BR>
<DT><CODE>int imageX</CODE>
(in) <DD>X-coordinate of upper-left corner of region of image to redisplay<BR>
(measured in pixels from the image's upper-left corner).<BR>
<DT><CODE>int imageY</CODE>
(in) <DD>Y-coordinate of upper-left corner of region of image to redisplay<BR>
(measured in pixels from the image's upper-left corner).<BR>
<DT><CODE>"int" width</CODE>
((in)) <DD>Width of region of image to redisplay.<BR>
<DT><CODE>"int" height</CODE>
((in)) <DD>Height of region of image to redisplay.<BR>
<DT><CODE>Drawable drawable</CODE>
(in) <DD>Where to display image.  Must either be window specified to<BR>
<B>Tk_GetImage</B> or a pixmap compatible with that window.<BR>
<DT><CODE>int drawableX</CODE>
(in) <DD>Where to display image in <I>drawable</I>: this is the x-coordinate<BR>
in <I>drawable</I> where x-coordinate <I>imageX</I> of the image<BR>
should be displayed.<BR>
<DT><CODE>int drawableY</CODE>
(in) <DD>Where to display image in <I>drawable</I>: this is the y-coordinate<BR>
in <I>drawable</I> where y-coordinate <I>imageY</I> of the image<BR>
should be displayed.<BR>
<DT><CODE>"int" widthPtr</CODE>
(out) <DD>Store width of <I>image</I> (in pixels) here.<BR>
<DT><CODE>"int" heightPtr</CODE>
(out) <DD>Store height of <I>image</I> (in pixels) here.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
These procedures are invoked by widgets that wish to display images.<BR>
<B>Tk_GetImage</B> is invoked by a widget when it first decides to<BR>
display an image.<BR>
<I>name</I> gives the name of the desired image and <I>tkwin</I><BR>
identifies the window where the image will be displayed.<BR>
<B>Tk_GetImage</B> looks up the image in the table of existing<BR>
images and returns a token for a new instance of the image.<BR>
If the image doesn't exist then <B>Tk_GetImage</B> returns NULL<BR>
and leaves an error message in <I>interp-&gt;result</I>.<BR>
<P>
When a widget wishes to actually display an image it must<BR>
call <B>Tk_RedrawWidget</B>, identifying the image (<I>image</I>),<BR>
a region within the image to redisplay (<I>imageX</I>, <I>imageY</I>,<BR>
<I>width</I>, and <I>height</I>), and a place to display the<BR>
image (<I>drawable</I>, <I>drawableX</I>, and <I>drawableY</I>).<BR>
Tk will then invoke the appropriate image manager, which will<BR>
display the requested portion of the image before returning.<BR>
<P>
A widget can find out the dimensions of an image by calling<BR>
<B>Tk_SizeOfImage</B>:  the width and height will be stored<BR>
in the locations given by <I>widthPtr</I> and <I>heightPtr</I>,<BR>
respectively.<BR>
<P>
When a widget is finished with an image (e.g., the widget is<BR>
being deleted or it is going to use a different image instead<BR>
of the current one), it must call <B>Tk_FreeImage</B> to<BR>
release the image instance.<BR>
The widget should never again use the image token after passing<BR>
it to <B>Tk_FreeImage</B>.<BR>
There must be exactly one call to <B>Tk_FreeImage</B> for each<BR>
call to <B>Tk_GetImage</B>.<BR>
<P>
If the contents or size of an image changes, then any widgets<BR>
using the image will need to find out about the changes so that<BR>
they can redisplay themselves.<BR>
The <I>changeProc</I> and <I>clientData</I> arguments to<BR>
<B>Tk_GetImage</B> are used for this purpose.<BR>
<I>changeProc</I> will be called by Tk whenever a change occurs<BR>
in the image;  it must match the following prototype:<BR>
<BR>
<DL>
typedef void Tk_ImageChangedProc(<BR>
<DL>
ClientData <I>clientData</I>,<BR>
int <I>x</I>,<BR>
int <I>y</I>,<BR>
int <I>width</I>,<BR>
int <I>height</I>,<BR>
int <I>imageWidth</I>,<BR>
int <I>imageHeight</I>);<BR>
</DL>
</DL>
<BR>
The <I>clientData</I> argument to <I>changeProc</I> is the same as the
<I>clientData</I> argument to <B>Tk_GetImage</B>.
It is usually a pointer to the widget record for the widget or
some other data structure managed by the widget.
The arguments <I>x</I>, <I>y</I>, <I>width</I>, and <I>height</I>
identify a region within the image that must be redisplayed;
they are specified in pixels measured from the upper-left
corner of the image.
The arguments <I>imageWidth</I> and <I>imageHeight</I> give
the image's (new) size.

<A NAME=Section0><H2>SEE ALSO</H2>
</A><A HREF="CrtImgType.ht"> Tk_CreateImageType</A>

<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>images, redisplay
