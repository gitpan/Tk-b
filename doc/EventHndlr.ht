<HTML>
<! Copyright (c) 1990 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) EventHndlr.3 1.11 95/05/06 15:29:21-->
<! -->
<H1>Tk_CreateEventHandler</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_CreateEventHandler, Tk_DeleteEventHandler - associate procedure callback with an X event
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
<B>Tk_CreateEventHandler</B>(<I>tkwin, mask, proc, clientData</I>)<BR>
<P>
<B>Tk_DeleteEventHandler</B>(<I>tkwin, mask, proc, clientData</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Token for window in which events may occur.<BR>
<DT><CODE>"unsigned long" mask</CODE>
(in) <DD>Bit-mask of events (such as <B>ButtonPressMask</B>)<BR>
for which <I>proc</I> should be called.<BR>
<DT><CODE>Tk_EventProc *proc</CODE>
(in) <DD>Procedure to invoke whenever an event in <I>mask</I> occurs<BR>
in the window given by <I>tkwin</I>.<BR>
<DT><CODE>ClientData clientData</CODE>
(in) <DD>Arbitrary one-word value to pass to <I>proc</I>.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
<B>Tk_CreateEventHandler</B> arranges for <I>proc</I> to be<BR>
invoked in the future whenever one of the event types specified<BR>
by <I>mask</I> occurs in the window specified by <I>tkwin</I>.<BR>
The callback to <I>proc</I> will be made by <B>Tk_HandleEvent</B>;<BR>
this mechanism only works in programs that dispatch events<BR>
through <B>Tk_HandleEvent</B> (or through other Tk procedures that<BR>
call <B>Tk_HandleEvent</B>, such as <B>Tk_DoOneEvent</B> or<BR>
<B>Tk_MainLoop</B>).<BR>
<P>
<I>Proc</I> should have arguments and result that match the<BR>
type <B>Tk_EventProc</B>:<BR>
<BR>
<DL>
typedef void Tk_EventProc(<BR>
<DL>
ClientData <I>clientData</I>,<BR>
XEvent *<I>eventPtr</I>);<BR>
</DL>
</DL>
<BR>
The <I>clientData</I> parameter to <I>proc</I> is a copy of the <I>clientData</I>
argument given to <B>Tk_CreateEventHandler</B> when the callback
was created.  Typically, <I>clientData</I> points to a data
structure containing application-specific information about
the window in which the event occurred.  <I>EventPtr</I> is
a pointer to the X event, which will be one of the ones
specified in the <I>mask</I> argument to <B>Tk_CreateEventHandler</B>.
<P>
<B>Tk_DeleteEventHandler</B> may be called to delete a
previously-created event handler:  it deletes the first handler
it finds that is associated with <I>tkwin</I> and matches the
<I>mask</I>, <I>proc</I>, and <I>clientData</I> arguments.  If
no such handler exists, then <B>Tk_EventHandler</B> returns
without doing anything.  Although Tk supports it, it's probably
a bad idea to have more than one callback with the same <I>mask</I>,
<I>proc</I>, and <I>clientData</I> arguments.
When a window is deleted all of its handlers will be deleted
automatically;  in this case there is no need to call
<B>Tk_DeleteEventHandler</B>.
<P>
If mutliple handlers are declared for the same type of X event
on the same window, then the handlers will be invoked in the
order they were created.

<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>bind, callback, event, handler
