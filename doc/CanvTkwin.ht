<HTML>
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) CanvTkwin.3 1.3 95/05/06 15:31:43-->
<! -->
<H1>Tk_CanvasTkwin</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_CanvasTkwin, Tk_CanvasGetCoord, Tk_CanvasDrawableCoords, Tk_CanvasSetStippleOrigin, Tk_CanvasWindowCoords, Tk_CanvasEventuallyRedraw - utility procedures for canvas type managers<BR>
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Tk_Window<BR>
<B>Tk_CanvasTkwin</B>(<I>canvas</I>)<BR>
<P>
int<BR>
<B>Tk_CanvasGetCoord</B>(<I>interp, canvas, string, doublePtr</I>)<BR>
<P>
<B>Tk_CanvasDrawableCoords</B>(<I>canvas, x, y, drawableXPtr, drawableYPtr</I>)<BR>
<P>
<B>Tk_CanvasSetStippleOrigin</B>(<I>canvas, gc</I>)<BR>
<P>
<B>Tk_CanvasWindowCoords</B>(<I>canvas, x, y, screenXPtr, screenYPtr</I>)<BR>
<P>
<B>Tk_CanvasEventuallyRedraw</B>(<I>canvas, x1, y1, x2, y2</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tk_Canvas canvas</CODE>
(in) <DD>A token that identifies a canvas widget.<BR>
<DT><CODE>Tcl_Interp *interp</CODE>
(in/out) <DD>Interpreter to use for error reporting.<BR>
<DT><CODE>char *string</CODE>
(in) <DD>Textual description of a canvas coordinate.<BR>
<DT><CODE>double *doublePtr</CODE>
(out) <DD>Points to place to store a converted coordinate.<BR>
<DT><CODE>double x</CODE>
(in) <DD>An x coordinate in the space of the canvas.<BR>
<DT><CODE>double y</CODE>
(in) <DD>A y coordinate in the space of the canvas.<BR>
<DT><CODE>short *drawableXPtr</CODE>
(out) <DD>Pointer to a location in which to store an x coordinate in the space<BR>
of the drawable currently being used to redisplay the canvas.<BR>
<DT><CODE>short *drawableYPtr</CODE>
(out) <DD>Pointer to a location in which to store a y coordinate in the space<BR>
of the drawable currently being used to redisplay the canvas.<BR>
<DT><CODE>GC gc</CODE>
(out) <DD>Graphics context to modify.<BR>
<DT><CODE>short *screenXPtr</CODE>
(out) <DD>Points to a location in which to store the screen coordinate in the<BR>
canvas window that corresponds to <I>x</I>.<BR>
<DT><CODE>short *screenYPtr</CODE>
(out) <DD>Points to a location in which to store the screen coordinate in the<BR>
canvas window that corresponds to <I>y</I>.<BR>
<DT><CODE>int x1</CODE>
(in) <DD>Left edge of the region that needs redisplay.  Only pixels at or to<BR>
the right of this coordinate need to be redisplayed.<BR>
<DT><CODE>int y1</CODE>
(in) <DD>Top edge of the region that needs redisplay.  Only pixels at or below<BR>
this coordinate need to be redisplayed.<BR>
<DT><CODE>int x2</CODE>
(in) <DD>Right edge of the region that needs redisplay.  Only pixels to<BR>
the left of this coordinate need to be redisplayed.<BR>
<DT><CODE>int y2</CODE>
(in) <DD>Bottom edge of the region that needs redisplay.  Only pixels above<BR>
this coordinate need to be redisplayed.<BR>
<DT><CODE></CODE>
<DD></DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
These procedures are called by canvas type managers to perform various<BR>
utility functions.<BR>
<P>
<B>Tk_CanvasTkwin</B> returns the Tk_Window associated with a particular<BR>
canvas.<BR>
<P>
<B>Tk_CanvasGetCoord</B> translates a string specification of a<BR>
coordinate (such as <B>2p</B> or <B>1.6c</B>) into a double-precision<BR>
canvas coordinate.<BR>
If <I>string</I> is a valid coordinate description then <B>Tk_CanvasGetCoord</B><BR>
stores the corresponding canvas coordinate at *<I>doublePtr</I><BR>
and returns TCL_OK.<BR>
Otherwise it stores an error message in <I>interp-&gt;result</I> and<BR>
returns TCL_ERROR.<BR>
<P>
<B>Tk_CanvasDrawableCoords</B> is called by type managers during<BR>
redisplay to compute where to draw things.<BR>
Given <I>x</I> and <I>y</I> coordinates in the space of the<BR>
canvas, <B>Tk_CanvasDrawableCoords</B> computes the corresponding<BR>
pixel in the drawable that is currently being used for redisplay;<BR>
it returns those coordinates in *<I>drawableXPtr</I> and *<I>drawableYPtr</I>.<BR>
This procedure should not be invoked except during redisplay.<BR>
<P>
<B>Tk_CanvasSetStippleOrigin</B> is also used during redisplay.<BR>
It sets the stipple origin in <I>gc</I> so that stipples drawn<BR>
with <I>gc</I> in the current offscreen pixmap will line up<BR>
with stipples drawn with origin (0,0) in the canvas's actual<BR>
window.<BR>
<B>Tk_CanvasSetStippleOrigin</B> is needed in order to guarantee<BR>
that stipple patterns line up properly when the canvas is<BR>
redisplayed in small pieces.<BR>
Redisplays are carried out in double-buffered fashion where a<BR>
piece of the canvas is redrawn in an offscreen pixmap and then<BR>
copied back onto the screen.<BR>
In this approach the stipple origins in graphics contexts need to<BR>
be adjusted during each redisplay to compensate for the position<BR>
of the off-screen pixmap relative to the window.<BR>
If an item is being drawn with stipples, its type manager typically<BR>
calls <B>Tk_CanvasSetStippleOrigin</B> just before using <I>gc</I><BR>
to draw something;  after it is finished drawing, the type manager<BR>
calls <B>XSetTSOrigin</B> to restore the origin in <I>gc</I> back to (0,0)<BR>
(the restore is needed because graphics contexts are shared, so<BR>
they cannot be modified permanently).<BR>
<P>
<B>Tk_CanvasWindowCoords</B> is similar to <B>Tk_CanvasDrawableCoords</B><BR>
except that it returns coordinates in the canvas's window on the<BR>
screen, instead of coordinates in an off-screen pixmap.<BR>
<P>
<B>Tk_CanvasEventuallyRedraw</B> may be invoked by a type manager<BR>
to inform Tk that a portion of a canvas needs to be redrawn.<BR>
The <I>x1</I>, <I>y1</I>, <I>x2</I>, and <I>y2</I> arguments<BR>
specify the region that needs to be redrawn, in canvas coordinates.<BR>
Type managers rarely need to invoke <B>Tk_CanvasEventuallyRedraw</B>,<BR>
since Tk can normally figure out when an item has changed and make<BR>
the redisplay request on its behalf (this happens, for example<BR>
whenever Tk calls a <I>configureProc</I> or <I>scaleProc</I>).<BR>
The only time that a type manager needs to call<BR>
<B>Tk_CanvasEventuallyRedraw</B> is if an item has changed on its own<BR>
without being invoked through one of the procedures in its Tk_ItemType;<BR>
this could happen, for example, in an image item if the image is<BR>
modified using image commands.<BR>
<BR>
<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>canvas, focus, item type, redisplay, selection, type manager<BR>
