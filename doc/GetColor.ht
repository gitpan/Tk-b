<HTML>
<! Copyright (c) 1990, 1991 The Regents of the University of California.-->
<! Copyright (c) 1994-1995 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) GetColor.3 1.17 95/05/28 13:54:52-->
<! -->
<H1>Tk_GetColor</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_GetColor, Tk_GetColorByValue, Tk_NameOfColor, Tk_FreeColor - maintain database of colors<BR>
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
XColor *<BR>
<B>Tk_GetColor</B>(<I>interp, tkwin, nameId</I><B>)</B><BR>
<P>
XColor *<BR>
<B>Tk_GetColorByValue</B>(<I>tkwin, prefPtr</I><B>)</B><BR>
<P>
char *<BR>
<B>Tk_NameOfColor(</B><I>colorPtr</I><B>)</B><BR>
<P>
GC<BR>
<B>Tk_GCForColor</B>(<I>colorPtr, drawable</I>)<BR>
<P>
<B>Tk_FreeColor(</B><I>colorPtr</I><B>)</B><BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tcl_Interp *interp</CODE>
(in) <DD>Interpreter to use for error reporting.<BR>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Token for window in which color will be used.<BR>
<DT><CODE>Tk_Uid nameId</CODE>
(in) <DD>Textual description of desired color.<BR>
<DT><CODE>XColor *prefPtr</CODE>
(in) <DD>Indicates red, green, and blue intensities of desired<BR>
color.<BR>
<DT><CODE>XColor *colorPtr</CODE>
(in) <DD>Pointer to X color information.  Must have been allocated by previous<BR>
call to <B>Tk_GetColor</B> or <B>Tk_GetColorByValue</B>, except when passed<BR>
to <B>Tk_NameOfColor</B>.<BR>
<DT><CODE>Drawable drawable</CODE>
(in) <DD>Drawable in which the result graphics context will be used.  Must have<BR>
same screen and depth as the window for which the color was allocated.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
The <B>Tk_GetColor</B> and <B>Tk_GetColorByValue</B> procedures<BR>
locate pixel values that may be used to render particular<BR>
colors in the window given by <I>tkwin</I>.  In <B>Tk_GetColor</B><BR>
the desired color is specified with a Tk_Uid (<I>nameId</I>), which<BR>
may have any of the following forms:<BR>
<DL>
<DT><I>colorname</I>

<DD>Any of the valid textual names for a color defined in the<BR>
server's color database file, such as <B>red</B> or <B>PeachPuff</B>.<BR>
<DT><B>#</B><I>RGB</I>

<DD><DT><B>#</B><I>RRGGBB</I>

<DD><DT><B>#</B><I>RRRGGGBBB</I>

<DD><DT><B>#</B><I>RRRRGGGGBBBB</I>

<DD>A numeric specification of the red, green, and blue intensities<BR>
to use to display the color.  Each <I>R</I>, <I>G</I>, or <I>B</I><BR>
represents a single hexadecimal digit.  The four forms permit<BR>
colors to be specified with 4-bit, 8-bit, 12-bit or 16-bit values.<BR>
When fewer than 16 bits are provided for each color, they represent<BR>
the most significant bits of the color.  For example, #3a7 is the<BR>
same as #3000a0007000.<BR>
</DL>
<P>
In <B>Tk_GetColorByValue</B>, the desired color is indicated with<BR>
the <I>red</I>, <I>green</I>, and <I>blue</I> fields of the structure<BR>
pointed to by <I>colorPtr</I>.<BR>
<P>
If <B>Tk_GetColor</B> or <B>Tk_GetColorByValue</B> is successful<BR>
in allocating the desired color, then it returns a pointer to<BR>
an XColor structure;  the structure indicates the exact intensities of<BR>
the allocated color (which may differ slightly from those requested,<BR>
depending on the limitations of the screen) and a pixel value<BR>
that may be used to draw in the color.<BR>
If the colormap for <I>tkwin</I> is full, <B>Tk_GetColor</B><BR>
and <B>Tk_GetColorByValue</B> will use the closest existing color<BR>
in the colormap.<BR>
If <B>Tk_GetColor</B> encounters an error while allocating<BR>
the color (such as an unknown color name) then NULL is returned and<BR>
an error message is stored in <I>interp-&gt;result</I>;<BR>
<B>Tk_GetColorByValue</B> never returns an error.<BR>
<P>
<B>Tk_GetColor</B> and <B>Tk_GetColorByValue</B> maintain a database<BR>
of all the colors currently in use.<BR>
If the same <I>nameId</I> is requested multiple times from<BR>
<B>Tk_GetColor</B> (e.g. by different windows), or if the<BR>
same intensities are requested multiple times from<BR>
<B>Tk_GetColorByValue</B>, then existing pixel values will<BR>
be re-used.  Re-using an existing pixel avoids any interaction<BR>
with the X server, which makes the allocation much more<BR>
efficient.  For this reason, you should generally use<BR>
<B>Tk_GetColor</B> or <B>Tk_GetColorByValue</B><BR>
instead of Xlib procedures like <B>XAllocColor</B>,<BR>
<B>XAllocNamedColor</B>, or <B>XParseColor</B>.<BR>
<P>
Since different calls to <B>Tk_GetColor</B> or <B>Tk_GetColorByValue</B><BR>
may return the same shared<BR>
pixel value, callers should never change the color of a pixel<BR>
returned by the procedures.<BR>
If you need to change a color value dynamically, you should use<BR>
<B>XAllocColorCells</B> to allocate the pixel value for the color.<BR>
<P>
The procedure <B>Tk_NameOfColor</B> is roughly the inverse of<BR>
<B>Tk_GetColor</B>.  If its <I>colorPtr</I> argument was created<BR>
by <B>Tk_GetColor</B>, then the return value is the <I>nameId</I><BR>
string that was passed to <B>Tk_GetColor</B> to create the<BR>
color.  If <I>colorPtr</I> was created by a call to <B>Tk_GetColorByValue</B>,<BR>
or by any other mechanism, then the return value is a string<BR>
that could be passed to <B>Tk_GetColor</B> to return the same<BR>
color.  Note:  the string returned by <B>Tk_NameOfColor</B> is<BR>
only guaranteed to persist until the next call to <B>Tk_NameOfColor</B>.<BR>
<P>
<B>Tk_GCForColor</B> returns a graphics context whose <B>Foreground</B><BR>
field is the pixel allocated for <I>colorPtr</I> and whose other fields<BR>
all have default values.<BR>
This provides an easy way to do basic drawing with a color.<BR>
The graphics context is cached with the color and will exist only as<BR>
long as <I>colorPtr</I> exists;  it is freed when the last reference<BR>
to <I>colorPtr</I> is freed by calling <B>Tk_FreeColor</B>.<BR>
<P>
When a pixel value returned by <B>Tk_GetColor</B> or<BR>
<B>Tk_GetColorByValue</B> is no longer<BR>
needed, <B>Tk_FreeColor</B> should be called to release the color.<BR>
There should be exactly one call to <B>Tk_FreeColor</B> for<BR>
each call to <B>Tk_GetColor</B> or <B>Tk_GetColorByValue</B>.<BR>
When a pixel value is no longer in<BR>
use anywhere (i.e. it has been freed as many times as it has been gotten)<BR>
<B>Tk_FreeColor</B> will release it to the X server and delete it from<BR>
the database.<BR>
<BR>
<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>color, intensity, pixel value<BR>
