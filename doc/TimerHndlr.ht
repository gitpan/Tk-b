<HTML>
<! Copyright (c) 1990 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) TimerHndlr.3 1.9 95/05/28 13:52:12-->
<! -->
<H1>Tk_CreateTimerHandler</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_CreateTimerHandler, Tk_DeleteTimerHandler - call a procedure at a
given time
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Tk_TimerToken<BR>
<B>Tk_CreateTimerHandler</B>(<I>milliseconds, proc, clientData</I>)<BR>
<P>
<B>Tk_DeleteTimerHandler</B>(<I>token</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>int milliseconds</CODE>
(in) <DD>How many milliseconds to wait before invoking <I>proc</I>.<BR>
<DT><CODE>Tk_TimerProc *proc</CODE>
(in) <DD>Procedure to invoke after <I>milliseconds</I> have elapsed.<BR>
<DT><CODE>ClientData clientData</CODE>
(in) <DD>Arbitrary one-word value to pass to <I>proc</I>.<BR>
<DT><CODE>Tk_TimerToken token</CODE>
(in) <DD>Token for previously-created timer handler (the return value<BR>
from some previous call to <B>Tk_CreateTimerHandler</B>).<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
<B>Tk_CreateTimerHandler</B> arranges for <I>proc</I> to be<BR>
invoked at a time <I>milliseconds</I> milliseconds in the<BR>
future.<BR>
The callback to <I>proc</I> will be made by <B>Tk_DoOneEvent</B>,<BR>
so <B>Tk_CreateTimerHandler</B> is only useful in<BR>
programs that dispatch events<BR>
through <B>Tk_DoOneEvent</B> or through other Tk procedures that<BR>
call <B>Tk_DoOneEvent</B>, such as <B>Tk_MainLoop</B>.  The call<BR>
to <I>proc</I> may not be made at the exact time given by<BR>
<I>milliseconds</I>:  it will be made at the next opportunity<BR>
after that time.  For example, if <B>Tk_DoOneEvent</B> isn't<BR>
called until long after the time has elapsed, or if there<BR>
are other pending events to process before the call to<BR>
<I>proc</I>, then the call to <I>proc</I> will be delayed.<BR>
<P>
<I>Proc</I> should have arguments and return value that match<BR>
the type <B>Tk_TimerProc</B>:<BR>
<BR>
<DL>
typedef void Tk_TimerProc(ClientData <I>clientData</I>);<BR>
</DL>
<BR>
The <I>clientData</I> parameter to <I>proc</I> is a
copy of the <I>clientData</I> argument given to
<B>Tcl_CreateTimerHandler</B> when the callback
was created.  Typically, <I>clientData</I> points to a data
structure containing application-specific information about
what to do in <I>proc</I>.
<P>
<B>Tk_DeleteTimerHandler</B> may be called to delete a
previously-created timer handler.  It deletes the handler
indicated by <I>token</I> so that no call to <I>proc</I>
will be made;  if that handler no longer exists
(e.g. because the time period has already elapsed and <I>proc</I>
has been invoked) then <B>Tk_DeleteTimerHandler</B> does nothing.

<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>callback, clock, handler, timer
