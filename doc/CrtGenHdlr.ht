<HTML>
<! Copyright (c) 19922 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) CrtGenHdlr.3 1.5 95/05/06 15:29:14-->
<! -->
<H1>Tk_CreateGenericHandler</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_CreateGenericHandler, Tk_DeleteGenericHandler - associate procedure callback with all X events
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
<B>Tk_CreateGenericHandler</B>(<I>proc, clientData</I>)<BR>
<P>
<B>Tk_DeleteGenericHandler</B>(<I>proc, clientData</I>)<BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tk_GenericProc *proc</CODE>
(in) <DD>Procedure to invoke whenever any X event occurs on any display.<BR>
<DT><CODE>ClientData clientData</CODE>
(in) <DD>Arbitrary one-word value to pass to <I>proc</I>.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
<B>Tk_CreateGenericHandler</B> arranges for <I>proc</I> to be<BR>
invoked in the future whenever any X event occurs.  This mechanism is<BR>
<I>not</I> intended for dispatching X events on windows managed by Tk<BR>
(you should use <B>Tk_CreateEventHandler</B> for this purpose).<BR>
<B>Tk_CreateGenericHandler</B> is intended for other purposes, such<BR>
as tracing X events, monitoring events on windows not owned by Tk,<BR>
accessing X-related libraries that were not originally designed for<BR>
use with Tk, and so on.<BR>
<P>
The callback to <I>proc</I> will be made by <B>Tk_HandleEvent</B>;<BR>
this mechanism only works in programs that dispatch events<BR>
through <B>Tk_HandleEvent</B> (or through other Tk procedures that<BR>
call <B>Tk_HandleEvent</B>, such as <B>Tk_DoOneEvent</B> or<BR>
<B>Tk_MainLoop</B>).<BR>
<P>
<I>Proc</I> should have arguments and result that match the<BR>
type <B>Tk_GenericProc</B>:<BR>
<BR>
<DL>
typedef int Tk_GenericProc(<BR>
<DL>
ClientData <I>clientData</I>,<BR>
XEvent *<I>eventPtr</I>);<BR>
</DL>
</DL>
<BR>
The <I>clientData</I> parameter to <I>proc</I> is a copy of the <I>clientData</I>
argument given to <B>Tk_CreateGenericHandler</B> when the callback
was created.  Typically, <I>clientData</I> points to a data
structure containing application-specific information about
how to handle events.
<I>EventPtr</I> is a pointer to the X event.
<P>
Whenever an X event is processed by <B>Tk_HandleEvent</B>, <I>proc</I>
is called.  The return value from <I>proc</I> is normally 0.
A non-zero return value indicates that the event is not to be handled
further; that is, <I>proc</I> has done all processing that is to be
allowed for the event.
<P>
If there are multiple generic event handlers, each one is called
for each event, in the order in which they were established.
<P>
<B>Tk_DeleteGenericHandler</B> may be called to delete a
previously-created generic event handler:  it deletes each handler
it finds that matches the <I>proc</I> and <I>clientData</I> arguments.  If
no such handler exists, then <B>Tk_DeleteGenericHandler</B> returns
without doing anything.  Although Tk supports it, it's probably
a bad idea to have more than one callback with the same
<I>proc</I> and <I>clientData</I> arguments.
<P>
Establishing a generic event handler does nothing to ensure that the
process will actually receive the X events that the handler wants to
process.
For example, it is the caller's responsibility to invoke
<B>XSelectInput</B> to select the desired events, if that is necessary.
<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>bind, callback, event, handler
