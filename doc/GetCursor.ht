<HTML>
<! Copyright (c) 1990 The Regents of the University of California.-->
<! Copyright (c) 1994 Sun Microsystems, Inc.-->
<! See the file "license.terms" for information on usage and redistribution-->
<! of this file, and for a DISCLAIMER OF ALL WARRANTIES.-->
<! -->
<! @(#) GetCursor.3 1.14 95/05/06 15:29:33-->
<! -->
<H1>Tk_GetCursor</H1>
<HR>
<A NAME=NAME><H2>NAME</H2>
</A>Tk_GetCursor, Tk_GetCursorFromData, Tk_NameOfCursor, Tk_FreeCursor - maintain database of cursors
<A NAME=SYNOPSIS><H2>SYNOPSIS</H2>
</A><BR>
<B>#include &lt;tk.h&gt;</B><BR>
<P>
Cursor<BR>
<B>Tk_GetCursor(</B><I>interp, tkwin, nameId</I><B>)</B><BR>
<P>
Cursor<BR>
<B>Tk_GetCursorFromData(</B><I>interp, tkwin, source, mask, width, height, xHot, yHot, fg, bg</I><B>)</B><BR>
<P>
char *<BR>
<B>Tk_NameOfCursor(</B><I>display, cursor</I><B>)</B><BR>
<P>
<B>Tk_FreeCursor(</B><I>display, cursor</I><B>)</B><BR>
<A NAME=ARGUMENTS><H2>ARGUMENTS</H2>
</A><DL>
<DT><CODE>Tcl_Interp *interp</CODE>
(in) <DD>Interpreter to use for error reporting.<BR>
<DT><CODE>Tk_Window tkwin</CODE>
(in) <DD>Token for window in which the cursor will be used.<BR>
<DT><CODE>Tk_Uid nameId</CODE>
(in) <DD>Description of cursor;  see below for possible values.<BR>
<DT><CODE>char *source</CODE>
(in) <DD>Data for cursor bitmap, in standard bitmap format.<BR>
<DT><CODE>char *mask</CODE>
(in) <DD>Data for mask bitmap, in standard bitmap format.<BR>
<DT><CODE>"int" width</CODE>
(in) <DD>Width of <I>source</I> and <I>mask</I>.<BR>
<DT><CODE>"int" height</CODE>
(in) <DD>Height of <I>source</I> and <I>mask</I>.<BR>
<DT><CODE>"int" xHot</CODE>
(in) <DD>X-location of cursor hot-spot.<BR>
<DT><CODE>"int" yHot</CODE>
(in) <DD>Y-location of cursor hot-spot.<BR>
<DT><CODE>Tk_Uid fg</CODE>
(in) <DD>Textual description of foreground color for cursor.<BR>
<DT><CODE>Tk_Uid bg</CODE>
(in) <DD>Textual description of background color for cursor.<BR>
<DT><CODE>Display *display</CODE>
(in) <DD>Display for which <I>cursor</I> was allocated.<BR>
<DT><CODE>Cursor cursor</CODE>
(in) <DD>X identifier for cursor.  If passed to<B>Tk_FreeCursor</B>, must<BR>
have been returned by some previous call to <B>Tk_GetCursor</B> or<BR>
<B>Tk_GetCursorFromData</B>.<BR>
</DL>
<HR>
<BR>
<A NAME=DESCRIPTION><H2>DESCRIPTION</H2>
</A><P>
These procedures manage a collection of cursors<BR>
being used by an application.  The procedures allow cursors to be<BR>
re-used efficiently, thereby avoiding server overhead, and also<BR>
allow cursors to be named with character strings (actually Tk_Uids).<BR>
<P>
<B>Tk_GetCursor</B> takes as argument a Tk_Uid describing a cursor,<BR>
and returns the X identifier for a cursor corresponding to the<BR>
description.  It re-uses an existing cursor if possible and<BR>
creates a new one otherwise.  <I>NameId</I> must be a standard Tcl<BR>
list with one of the following forms:<BR>
<DL>
<DT><I>name</I>  [<I>fgColor</I>  [<I>bgColor</I>]]

<DD><I>Name</I> is the name of a cursor in the standard X cursor font,<BR>
i.e., any of the names defined in <B>cursorfont.h</B>, without<BR>
the <B>XC_</B>.  Some example values are <B>X_cursor</B>, <B>hand2</B>,<BR>
or <B>left_ptr</B>.  Appendix B of ``The X Window System''<BR>
by Scheifler &amp; Gettys has illustrations showing what each of these<BR>
cursors looks like.  If <I>fgColor</I> and <I>bgColor</I> are both<BR>
specified, they give the foreground and background colors to use<BR>
for the cursor (any of the forms acceptable to <B>Tk_GetColor</B><BR>
may be used).  If only <I>fgColor</I> is specified, then there<BR>
will be no background color:  the background will be transparent.<BR>
If no colors are specified, then the cursor<BR>
will use black for its foreground color and white for its background<BR>
color.<BR>
<DT><B>@</B><I>sourceName  maskName  fgColor  bgColor</I>

<DD><BR>
In this form, <I>sourceName</I> and <I>maskName</I> are the names of<BR>
files describing bitmaps for the cursor's source bits and mask.<BR>
Each file must be in standard X11 or X10 bitmap format.<BR>
<I>FgColor</I> and <I>bgColor</I> <BR>
indicate the colors to use for the<BR>
cursor, in any of the forms acceptable to <B>Tk_GetColor</B>.<BR>
<DT><B>@</B><I>sourceName  fgColor</I>

<DD><BR>
This form is similar to the one above, except that the source is<BR>
used as mask also.  This means that the cursor's background is transparent.<BR>
<P>
<B>Tk_GetCursorFromData</B> allows cursors to be created from<BR>
in-memory descriptions of their source and mask bitmaps.  <I>Source</I><BR>
points to standard bitmap data for the cursor's source bits, and<BR>
<I>mask</I> points to standard bitmap data describing<BR>
which pixels of <I>source</I> are to be drawn and which are to be<BR>
considered transparent.  <I>Width</I> and <I>height</I> give the<BR>
dimensions of the cursor, <I>xHot</I> and <I>yHot</I> indicate the<BR>
location of the cursor's hot-spot (the point that is reported when<BR>
an event occurs), and <I>fg</I> and <I>bg</I> describe the cursor's<BR>
foreground and background colors textually (any of the forms<BR>
suitable for <B>Tk_GetColor</B> may be used).  Typically, the<BR>
arguments to <B>Tk_GetCursorFromData</B> are created by including<BR>
a cursor file directly into the source code for a program, as in<BR>
the following example:<BR>
<BR>
<BR>
<PRE>
Cursor cursor;<BR>
#include "source.cursor"<BR>
#include "mask.cursor"<BR>
cursor = Tk_GetCursorFromData(interp, tkwin, source_bits,<BR>
	mask_bits, source_width, source_height, source_x_hot,<BR>
	source_y_hot, Tk_GetUid("red"), Tk_GetUid("blue"));<BR>
<BR>
</PRE>
<BR>
<P>
Under normal conditions, <B>Tk_GetCursor</B> and <B>Tk_GetCursorFromData</B>
will return an identifier for the requested cursor.  If an error
occurs in creating the cursor, such as when <I>nameId</I> refers
to a non-existent file, then <B>None</B> is returned and an error
message will be stored in <I>interp-&gt;result</I>.
<P>
<B>Tk_GetCursor</B> and <B>Tk_GetCursorFromData</B> maintain a
database of all the cursors they have created.  Whenever possible,
a call to <B>Tk_GetCursor</B> or <B>Tk_GetCursorFromData</B> will
return an existing cursor rather than creating a new one.  This
approach can substantially reduce server overhead, so the Tk
procedures should generally be used in preference to Xlib procedures
like <B>XCreateFontCursor</B> or <B>XCreatePixmapCursor</B>, which
create a new cursor on each call.
<P>
The procedure <B>Tk_NameOfCursor</B> is roughly the inverse of
<B>Tk_GetCursor</B>.  If its <I>cursor</I> argument was created
by <B>Tk_GetCursor</B>, then the return value is the <I>nameId</I>
argument that was passed to <B>Tk_GetCursor</B> to create the
cursor.  If <I>cursor</I> was created by a call to <B>Tk_GetCursorFromData</B>,
or by any other mechanism, then the return value is a hexadecimal string
giving the X identifier for the cursor.
Note:  the string returned by <B>Tk_NameOfCursor</B> is
only guaranteed to persist until the next call to <B>Tk_NameOfCursor</B>.
<P>
When a cursor returned by <B>Tk_GetCursor</B> or <B>Tk_GetCursorFromData</B>
is no longer needed, <B>Tk_FreeCursor</B> should be called to release it.
There should be exactly one call to <B>Tk_FreeCursor</B> for
each call to <B>Tk_GetCursor</B> or <B>Tk_GetCursorFromData</B>.
When a cursor is no longer in use anywhere (i.e. it has been freed as
many times as it has been gotten) <B>Tk_FreeCursor</B> will release
it to the X server and remove it from the database.

</DL>
<A NAME=BUGS><H2>BUGS</H2>
</A>In determining whether an existing cursor can be used to satisfy
a new request, <B>Tk_GetCursor</B> and <B>Tk_GetCursorFromData</B>
consider only the immediate values of their arguments.  For
example, when a file name is passed to <B>Tk_GetCursor</B>,
<B>Tk_GetCursor</B> will assume it is safe to re-use an existing
cursor created from the same file name:  it will not check to
see whether the file itself has changed, or whether the current
directory has changed, thereby causing the name to refer to
a different file.  Similarly, <B>Tk_GetCursorFromData</B> assumes
that if the same <I>source</I> pointer is used in two different calls,
then the pointers refer to the same data;  it does not check to
see if the actual data values have changed.

<A NAME=KEYWORDS><H2>KEYWORDS</H2>
</A>cursor
